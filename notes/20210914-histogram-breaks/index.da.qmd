---
title: "Breaks i histogrammer"
subtitle: "indsæt subtitle"
author: "Christian Knudsen"
visible: "false" # sæt til noget andet når oplægget/noten er færdigt
categories:
  - R
  - Visualisering
date: 2021-09-14
toc: true
image: "histbreaks.png"
---
We have a rather bright medical student frequenting our datalab. He is studying the health of patients trying to commit suicide using paracetamol.
Spoiler - that is a really bad idea. If you absolutely have to kill yourself, find a method that will kill you faster than by destroying your liver. Better yet, dont, google “suicide prevention line” and call them instead.

Anyway. He had to make a histogram. And he had to adjust the breaks.
As a first step: Where are the breaks actually in your histogram?
Second: How do you adjust them?

Lets make a histogram of the islands of the world. R comes with a dataset containing the areas, in thousands of square miles, of the landmasses of Earth, that has an area exceeding 10.000 square miles.
The build-in function to make a histogram makes this extremely easy:

hist(islands)


It is a bit misleading. All the continents are considered islands. Granted, there is water all around them. But I would not call Asia an island.

Anyway. There are breaks at 2000, 4000, 6000 etc.
How does hist() choose those?
We get a hint in the help-file, that tells us this:

hist(x, breaks = "Sturges",
     freq = NULL, probability = !freq,
     include.lowest = TRUE, right = TRUE,
     density = NULL, angle = 45, col = NULL, border = NULL,
     main = paste("Histogram of" , xname),
     xlim = range(breaks), ylim = NULL,
     xlab = xname, ylab,
     axes = TRUE, plot = TRUE, labels = FALSE,
     nclass = NULL, warn.unused = TRUE, ...)


We can set breaks manually, but hist uses something called “Sturges” to calculate it as default.

We are also told that:

breaks one of:
a vector giving the breakpoints between histogram cells,
a function to compute the vector of breakpoints,
a single number giving the number of cells for the histogram,
a character string naming an algorithm to compute the number of cells (see ‘Details’),
a function to compute the number of cells.


Sturges appears to be a function calculating the breaks.

Googling a bit, we find out that the flow is actually:
use nclass.Sturges() to calculate the number of cells that should be in the histogram.
Then use the number from nclass.Sturges(), and the data, to calculate the actual breaks. That part uses the function pretty()

(n_breaks <- nclass.Sturges(islands))

## [1] 7

(actual_breaks <- pretty(islands, n_breaks))

##  [1]     0  2000  4000  6000  8000 10000 12000 14000 16000 18000


There you go, 7 breaks, and the 8 values we need to pass to hist() to get the breaks. Pretty is af neat function, that calculate a sequence of n+1 (here n is 7), equally spaced, “round” values covering the data we input to it. Round in this case means that they are powers of 10.

We can now plot again:

hist(islands, actual_breaks)



And we get the same plot as before.

Adjust actual_breaks to fit what you want. In this case we wanted all values below the limit of detection for something to be grouped in one cell of the histogram:

actual_breaks[2] <- 130
actual_breaks

##  [1]     0   130  4000  6000  8000 10000 12000 14000 16000 18000


And the new plot:

hist(islands, actual_breaks)


Horrible plot. But setting the first break to end at 130 is more meaningfull looking at bloodchemistry, than sizes of landmasses on Earth.

nclass.Sturges() is actually pretty simple: ceiling(log2(length(x)) + 1). There are two other built-in functions:

nclass.FD(islands)

## [1] 190

nclass.scott(islands)

## [1] 6


Use one that makes sense given your data.